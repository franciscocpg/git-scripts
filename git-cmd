#!/bin/bash

# varíaveis
CMD="$1"
CMD_ARGS="$2"
GIT_REPO_PATH="$3"
CLEAR="$4"
PRINT_PATH_ONLY="$5"
BEFORE_EXEC="$6"
PRINT_CMD="$7"
AFTER_EXEC="$8"
FORCE_PUSH="false"
EXEC_ARRAY=()
EXEC_ARRAY_IDX=0

# Importação
. utils.sh

if [[ -z "$PRINT_CMD" ]]; then
	PRINT_CMD="true"
fi
OUT=""
if [[ "$CLEAR" != "false" ]]; then
	clear
fi
# Se contém espaços, divide os argumentos
if [[ "$GIT_REPO_PATH" == *" "* ]]; then
	IFS=' ' read -a args <<< "$GIT_REPO_PATH"
	for index in "${!args[@]}"
	do
		if [[ "$index" == "0" ]]; 
		then
			GIT_REPO_PATH="${args[index]}"
		else
	    	CMD_ARGS="$CMD_ARGS ${args[index]}"
		fi
	done
fi
RETURN_STATUS="0"
# Verifica se as configurações estão iniciadas
git-init-config

printCmd() {
  if [[ "$PRINT_CMD" = "true" ]]; then
    echo -e "\n=========================================="
    echo "$CMD $CMD_ARGS $path $ARGS"
  fi
}

gitCmdExec() {
  if [[ "$CMD" != "test-commit" ]]; then
    local print="$1"
    if [[ "$CMD" = "pull" ]]; then
    	# Se o branch não for  informado, recupera o atual
    	IFS=' ' read -a splitArgs <<< "$CMD_ARGS"
    	lenSize=${#splitArgs[@]}
    	if [[ lenSize -eq 3 ]]; then
    		CMD_ARGS="$CMD_ARGS $(currentBranch)"
    	fi
    fi
    if [[ "$print" = "true" ]]; then
      printCmd
    fi
    if [[ -f "$BEFORE_EXEC" ]]; then
      echo "Executando $BEFORE_EXEC"
      ./$BEFORE_EXEC
    fi
    local cmd
    if [[ "$CMD" = "push-create-mr" ]]; then
    	cmd="push"
    else
    	cmd="$CMD"
    fi
    if [ "$CMD_ARGS" != "" ]
    then
      args=( "$CMD_ARGS" )
      if [[ "$CMD_ARGS" = "-m"* ]]
      then
        git $cmd "${args[@]}"
      else 
        git $cmd ${args[@]}
      fi
    else
  		git $cmd
    fi
  fi
  RETURN_STATUS=$?
  if [[ "$RETURN_STATUS" -gt 1 ]]; then
  	echo "Saida: $RETURN_STATUS"
  	exit $RETURN_STATUS
  fi
  if [[ "$RETURN_STATUS" = "0" && -f "$AFTER_EXEC" ]]; then
  	echo "Executando $AFTER_EXEC"
    ./$AFTER_EXEC
  fi
  if [[ "$CMD" = "push-create-mr" ]]; then
  	echo "Criando MR"
  	gitlab-create-mr .
  fi
}

isPush() {
	[[ "$CMD" = "push" || "$CMD" = "push-create-mr" ]]
}

beforePush() {
  GIT_CURRENT_BRANCH=$(currentBranch)
  GIT_REMOTE_REPO="origin"
  GIT_CURRENT_REMOTE_BRANCH=$(git rev-parse --abbrev-ref --symbolic-full-name @{u})
  GIT_REMOTE_BRANCH="$GIT_REMOTE_REPO/$GIT_CURRENT_BRANCH"
  if [[ "$GIT_CURRENT_REMOTE_BRANCH" != "$GIT_REMOTE_BRANCH" ]]; then
    echo "Setando branch para $GIT_REMOTE_BRANCH"
    git push -u "$GIT_REMOTE_REPO" "$GIT_CURRENT_BRANCH"
    if [[ "$GIT_REPO_PATH" != "" ]]; then
    	exit $?
    fi
  fi
}

currentBranch() {
	echo $(git rev-parse --abbrev-ref HEAD)
}

gitCmd() {
  local path="$1"
  containsElement "$path" "${EXEC_ARRAY[@]}"
  local executed="$?"
  # Ainda não foi executado
  if [[ -e "$path" && "$executed" == "1" ]]; then
	cd "$path"
	# É um repositório git
	if [[ -e ".git" || "$GIT_REPO_PATH" != "" ]]; then
		if [[ "$CMD" = "diff" && "$PRINT_PATH_ONLY" != "true" ]]; then
			# Diff imprime colorido
			outputCmd=$(gitCmdExec)
			if [[ -n "$outputCmd" ]]; then
			  OUT="$OUT$outputCmd"
			  printCmd
			  gitCmdExec
			fi
		else
			execGitCmd="true"
			if isPush && [[ "$CMD_ARGS" != *"--delete"*  ]]; then
			  outputCmd=$(git status -s -b)
			  noColorOutputCmd=$(removeColor "$outputCmd")
			  # Pega a primeira linha da saida
			  outputCmd=$(echo -e "$noColorOutputCmd" | sed -n 1p)
			  # Não executa o push se a saida não contém o caracter [
			  if [[ "$FORCE_PUSH" = "false" && "$outputCmd" != *"["* ]]
			  then
				execGitCmd="false"
			  fi
			fi
			if [[ "$CMD" = "test-commit" ]]; then
			  outputCmd=$(git status -s -b)
			  # Pega a quantidade de linhas na saida
			  outputCmdLines=$(echo -e "$outputCmd" | wc -l)
			  # Não executa o commit se a saida tiver menos de 2 linhas
			  if [[ $outputCmdLines -lt 2 ]]
			  then
				execGitCmd="false"
			  fi
			fi
			if [[ "$execGitCmd" = "true" ]]; then
			  if isPush; then
				beforePush
			  fi
			  # Só mostra status do que alterou
			  if [[ "$CMD" = "status" ]]; then
				outputCmd=$(gitCmdExec)
				noColorOutputCmd=$(removeColor "$outputCmd"``	)
				if [[ "$noColorOutputCmd" != "## master...origin/master" ]]; then
				   if [[ "$PRINT_PATH_ONLY" = "true" ]]; then
					OUT="$OUT$path\n"
				  else
					OUT="$OUT$(printCmd)"
					OUT="$OUT$outputCmd"
				  fi
				fi
			  # Só mostra diferença do que tem diferença
			  elif [[ "$CMD" = "diff" ]]; then
				outputCmd=$(gitCmdExec)
				local status="$?"
				if [[ "$status" != "0" ]]; then
				  OUT="\nErro: $path$OUT"
				elif [[ -n "$outputCmd" ]]; then
				  if [[ "$PRINT_PATH_ONLY" = "true" ]]; then
					OUT="$OUT$path\n"
				  else
					OUT="$OUT$(printCmd)\n"
					OUT="$OUT$outputCmd"
				  fi
				fi
			  else
				OUT=" "
				gitCmdExec "true"
			  fi
			fi
		fi
	else
		echo "Não é um repositório git: $path"
	fi
	EXEC_ARRAY[EXEC_ARRAY_IDX]="$path"
	EXEC_ARRAY_IDX=$((EXEC_ARRAY_IDX + 1))
	cd ..
  fi
}

# execução programa
if [[ "$CMD" = "force-push"  ]]; then
	CMD="push"
	FORCE_PUSH="true"
fi
if [[ "$GIT_REPO_PATH" = "" ]]; then
  for dir in */; do
      gitCmd "$dir"
  done
else
  if [[ -d  "$GIT_REPO_PATH" ]]; then
    gitCmd "$GIT_REPO_PATH"
  elif [[ -f "$GIT_REPO_PATH" ]]; then
    while read -r gitRepoPath
    do
      gitCmd $gitRepoPath
    done < "$GIT_REPO_PATH"
  fi
  
fi

if [[ -z "$OUT" ]]; then
  echo "Nada a fazer"
  exit 1
else
  if [[ "$CMD" != "diff" || "$PRINT_PATH_ONLY" = "true" ]]; then
    echo -e "$OUT"
  fi
  exit $RETURN_STATUS
fi  

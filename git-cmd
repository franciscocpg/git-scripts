#!/bin/bash
CMD="$1"
CMD_ARGS="$2"
GIT_REPO_PATH="$3"
BEFORE_EXEC="$4"
OUT=""
clear

printCmd() {
  echo -e "\n=========================================="
  echo "$CMD $CMD_ARGS $path"
}

gitCmdExec() {
  if [[ -f "$BEFORE_EXEC" ]]; then
    echo "Executando $BEFORE_EXEC"
    ./$BEFORE_EXEC
  fi
  local print="$1"
  if [[ "$print" = "true" ]]; then
    printCmd
  fi
  if [ "$CMD_ARGS" != "" ]
  then
    args=( "$CMD_ARGS" )
    if [[ "$CMD_ARGS" = "-m"* ]]
    then
      git $CMD "${args[@]}"
    else 
      git $CMD ${args[@]}
    fi
  else
    git $CMD
  fi
}

gitCmd() {
  local path="$1"
  cd "$path"
  execGitCmd="true"
  if [[ "$CMD" = "push" ]]; then
    outputCmd=$(git status -s -b)
    # Pega a primeira linha da saida
    outputCmd=$(echo -e "$outputCmd" | sed -n 1p)
    # Não executa o push se a saida não contém o caracter [
    if [[ "$outputCmd" != *"["* ]]
    then
      execGitCmd="false"
    fi
  fi
  if [[ "$execGitCmd" = "true" ]]; then
    # Só mostra status do que alterou
    if [[ "$CMD" = "status" ]]; then
      outputCmd=$(gitCmdExec)
      if [[ "$outputCmd" != "## master...origin/master" ]]; then
        OUT="$OUT$(printCmd)"
        OUT="$OUT$outputCmd"
      fi
    # Só mostra diferença do que tem diferença
    elif [[ "$CMD" = "diff" ]]; then
      outputCmd=$(gitCmdExec)
      if [[ -n "$outputCmd" ]]; then
        OUT="$OUT$(printCmd)\n"
        OUT="$OUT$outputCmd"
      fi
    else
      OUT=" "
      gitCmdExec "true"
    fi
  fi
  cd .. 
}

if [[ "$GIT_REPO_PATH" = "" ]]; then
  for dir in */; do
      gitCmd "$dir"
  done
else
  gitCmd "$GIT_REPO_PATH"
fi

if [[ -z "$OUT" ]]; then
  echo "Nada a fazer"
else
  echo -e "$OUT"
fi  